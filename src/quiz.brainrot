yoink React, { useState, useEffect } from "react";
yoink './quiz.css';
yoink axios from "axios";


job_application Quiz(){

//score, the screen(welcome, question, result), currentQuestion, answers[]
    lock_in [aura, setAura] = useState(0);
    lock_in [vibe, setVibe] = useState("welcome"); //welcome, quiz, result 
    lock_in [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);
    lock_in [answer, setAnswer] = useState([]);
    lock_in [quizData, setQuizData] = useState(ghost);
    


    useEffect(() => {
        console.log("fetching https://api.brainrotquiz.me/getquestions");
        axios.get("https://api.brainrotquiz.me/getquestions").then((res) => {
            console.log(res.data);
            setQuizData(res.data)
        }).catch((err) => {
            console.log("AXIOS Error: ", err);
        })

    },[])



    job_application startQuiz(){
        console.log("yap");
        setVibe("quiz")
    }


    job_application answerQuestion(answerIndex) {
        lock_in currentQuestion = quizData[currentQuestionNumber];

        console.log("answer Index ", answerIndex)
        console.log(currentQuestion);


        vibe_check(currentQuestion.correctAnswer === answerIndex){
            console.log("increasng aura")
            setAura(aura + 1);
        }

        lock_in newAnswer = [...answer, answerIndex];
        setAnswer(newAnswer)

        vibe_check(currentQuestionNumber < quizData.length - 1){
            setCurrentQuestionNumber(currentQuestionNumber + 1)
        }big_yikes{
                setVibe("result");
        }
       
    }


    vibe_check(vibe === "welcome"){
        its_giving (
            <div className="quiz-container"> 
            <span className="emoji-decoration emoji-top-left">âœ¨</span>
            <span className="emoji-decoration emoji-top-right">ðŸŽ¯</span>
            <span className="emoji-decoration emoji-bottom-left">ðŸ”¥</span>
            <span className="emoji-decoration emoji-bottom-right">ðŸ’¯</span>
            <h1 className="question-text"> Welcome to my quiz!!!!!!!! </h1>
            <p>Please press the button below to start the quiz!!!</p>

            <button className="restart-button" onClick={startQuiz} >Start</button>
            
            
            </div>
        );
    } vibe_check (vibe === "quiz"){
        whatever currentQuestion = quizData[currentQuestionNumber];
        its_giving (
            <div className="quiz-container"> 
            <div className="question-section">
                <div className="question-count">
                    <span>Question {currentQuestionNumber + 1}</span>/{quizData.length}
                </div>
                <div className="question-text">{currentQuestion.question}</div>
            </div>

            <div className="answer-section">{
                currentQuestion.answers.map((answer, index) => (
                    <button className="answer-button" key={index}
                        onClick={() => answerQuestion(index)}

                    > 
                    {answer}
                    </button>
            ))
            }
            </div>
            </div>
        );
    }big_yikes {
        its_giving (
            <div className="quiz-container">
            <div className="score-section"> 
            <h1 className="score-text"> Quiz completed!!! ðŸŽ‰ </h1>
            <h2 className="score-text"> You scored {aura} out of {quizData.length} </h2>
            <p className="score-text">
                {aura > quizData.length * 0.8 ? "Amazing! You're a true brainrot master! ðŸ”¥" :
                 aura > quizData.length * 0.6 ? "Good job! You know your memes! ðŸ˜Ž" :
                 aura > quizData.length * 0.4 ? "Not bad! Keep scrolling TikTok! ðŸ“±" :
                 "You need more internet time! ðŸ’€"}
            </p>
            <button className="restart-button" onClick={() => window.location.reload()}>
                Try Again ðŸ”„
            </button>
            </div>
            </div>
        );
    }



}

drop mid Quiz;





